How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It showed where there were differences in the code to reduce the amount
	of code that needed reviewing.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If there are errors in the latest verions of code it enables you to see
	what changes have been made to check for typo's, coding errors etc... 
	or to be able to revert back to a working version if the error is not 
	easily identified.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros - Able to commit at logical times in the coding process i.e. finishing 
	a section; correcting spelling mistakes; keeping work on different section 
	separate so they are easily traceable.
	Cons - It relies on the user to commit to the changes at the appropriate times.
	This can also be subjective as different people may have different opinions 
	and practices on when a commit is needed.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git was created for coding version control in mind so appreciates that in code
	there may be multiple files that change to create one overall change. While
	Google Docs was created for documents and these are unlikely to be linked to 
	other documents. 

How can you use the commands git log and git diff to view the history of files?

    git log contains unique ID's for each commit along with a user description 
	of the changes in that commit from the previous commit. To look at the changes
	between 2 commits identify the two ID's of interest and use the git diff ID_old
	ID_new to compare them. you can use just the 4 digits of the ID instead of copy/
	paste

How might using version control make you more confident to make changes that
could break something?

    because you've always got a fall back to a version of code that was working so
	there are no risks in trying something that may or may not work.

Now that you have your workspace set up, what do you want to try using Git for?

    I will be using git to version control the single page app I am working on 
	as part of the UdaCity course I am taking. This should allow me to make some 
	large changes to how the code is set out without loosing working version(s)
